// Generated by CoffeeScript 1.6.2
(function() {
  var Landscape, coffee_draw;

  coffee_draw = function(p5) {
    p5.setup = function() {
      p5.size($(window).width(), $(window).height(), p5.P3D);
      p5.createRandomGenerationData();
      return p5.newGeneration();
    };
    p5.newGeneration = function() {
      this.land = new Landscape(p5);
      return this.theta = 0.0;
    };
    p5.createRandomGenerationData = function() {
      return this.curGenData = {
        cellSize: 10,
        width: 800,
        height: 400
      };
    };
    p5.draw = function() {
      p5.background(255);
      p5.pushMatrix();
      p5.translate(p5.width / 2, p5.height / 2 + 20, -160);
      p5.rotateX(p5.PI / 3);
      p5.rotateZ(this.theta);
      this.land.render();
      p5.popMatrix();
      this.land.calculate();
      return this.theta += 0.0025;
    };
    p5.skip = function() {
      p5.createRandomGenerationData();
      return p5.newGeneration();
    };
    return p5.like = function() {};
  };

  Landscape = (function() {
    function Landscape(p5) {
      this.p5 = p5;
      this.landData = this.p5.curGenData;
      this.numCols = this.landData.width / this.landData.cellSize;
      this.numRows = this.landData.height / this.landData.cellSize;
      this.heightValues = this.createEmpty2DArray(this.numCols, this.numRows);
      this.cellSize = this.landData.cellSize;
      this.zoff = 2.0;
    }

    Landscape.prototype.calculate = function() {
      var i, j, xoff, yoff, _i, _j, _ref, _ref1, _results;

      xoff = 0;
      _results = [];
      for (i = _i = 0, _ref = this.numCols; _i < _ref; i = _i += 1) {
        yoff = 0;
        for (j = _j = 0, _ref1 = this.numRows; _j < _ref1; j = _j += 1) {
          this.heightValues[i][j] = this.p5.map(this.p5.noise(xoff, yoff, this.zoff), 0, 1, -120, 120);
          yoff += 0.1;
        }
        _results.push(this.zoff += 0.1);
      }
      return _results;
    };

    Landscape.prototype.render = function() {
      var x, y, _i, _ref, _results;

      _results = [];
      for (x = _i = 0, _ref = this.heightValues.length - 1; _i < _ref; x = _i += 1) {
        _results.push((function() {
          var _j, _ref1, _results1;

          _results1 = [];
          for (y = _j = 0, _ref1 = this.heightValues[x].length - 1; _j < _ref1; y = _j += 1) {
            this.p5.fill(100, 100);
            this.p5.pushMatrix();
            this.p5.beginShape(this.p5.QUADS);
            this.p5.translate(x * this.cellSize - this.landData.width / 2, y * this.cellSize - this.landData.height / 2, 0);
            this.p5.vertex(0, 0, this.heightValues[x][y]);
            this.p5.vertex(this.cellSize, 0, this.heightValues[x + 1][y]);
            this.p5.vertex(this.cellSize, this.cellSize, this.heightValues[x + 1][y + 1]);
            this.p5.vertex(0, this.cellSize, this.heightValues[x][y + 1]);
            this.p5.endShape();
            _results1.push(this.p5.popMatrix());
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Landscape.prototype.createEmpty2DArray = function(numCols, numRows) {
      var col, row, _i, _results;

      _results = [];
      for (col = _i = 0; 0 <= numCols ? _i < numCols : _i > numCols; col = 0 <= numCols ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;

          _results1 = [];
          for (row = _j = 0; 0 <= numRows ? _j < numRows : _j > numRows; row = 0 <= numRows ? ++_j : --_j) {
            _results1.push(0);
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Landscape;

  })();

  $(document).ready(function() {
    var canvas, processing,
      _this = this;

    canvas = document.getElementById("processing");
    processing = new Processing(canvas, coffee_draw);
    $('#Like').bind('click', function(event) {
      return processing.like();
    });
    return $('#Skip').bind('click', function(event) {
      return processing.skip();
    });
  });

}).call(this);

/*
//@ sourceMappingURL=landscape_draw.map
*/
