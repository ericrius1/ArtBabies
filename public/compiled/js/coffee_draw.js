// Generated by CoffeeScript 1.6.2
(function() {
  var Bean, BeanNode, coffee_draw;

  coffee_draw = function(p5) {
    p5.setup = function() {
      p5.size($(window).width(), $(window).height(), p5.P3D);
      p5.mutationRate = 0.1;
      p5.mutationStrength = 2;
      p5.createRandomGenerationData();
      return p5.newGeneration();
    };
    p5.newGeneration = function() {
      var x, _i, _ref, _results;

      this.BeanNodes = [];
      p5.background(0);
      p5.numGenes = Object.keys(this.curGenData);
      this.curGenData.startingNodes = p5.round(this.curGenData.startingNodes);
      this.curGenData.drawFrequency = 1;
      _results = [];
      for (x = _i = 0, _ref = this.curGenData.startingNodes; _i < _ref; x = _i += 1) {
        _results.push(this.BeanNodes.push(new BeanNode(p5, this.curGenData)));
      }
      return _results;
    };
    p5.createRandomGenerationData = function() {
      return this.curGenData = {
        x_offModifier: p5.random(-0.1, 0.1),
        y_offModifier: p5.random(-20, 20),
        x_offIncrementer: p5.random(-0.01, 0.01),
        y_offIncrementer: p5.random(-0.01, 0.01),
        vel: p5.random(0, 60),
        accel: -0.003,
        hue: p5.random(0, 360),
        alpha: p5.random(4, 100),
        startingNodes: p5.round(p5.random(1, 5))
      };
    };
    p5.draw = function() {
      var beanNode, _i, _len, _ref, _results;

      _ref = this.BeanNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        beanNode = _ref[_i];
        _results.push(beanNode.draw());
      }
      return _results;
    };
    p5.addBeanNode = function(event) {
      this.BeanNodes.push(new BeanNode(p5, this.curGenData, event.clientX, event.clientY));
      return this.curGenData.startingNodes++;
    };
    p5.fade = function() {
      if (p5.frameCount % 225 === 0) {
        p5.stroke(0, 0);
        p5.fill(0, 10);
        return p5.rect(0, 0, p5.width, p5.height);
      }
    };
    p5.skip = function() {
      p5.createRandomGenerationData();
      return p5.newGeneration();
    };
    p5.like = function() {
      if (this.prevGenData != null) {
        this.prevPrevGenData = this.prevGenData;
      }
      this.prevGenData = this.curGenData;
      if (this.prevPrevGenData != null) {
        return p5.mateCrossover();
      } else {
        return p5.createRandomGenerationData() && p5.newGeneration();
      }
    };
    p5.mateAverage = function() {
      var key, _results;

      _results = [];
      for (key in this.prevPrevGenData) {
        p5.mateAttribute(key);
        _results.push(p5.newGeneration());
      }
      return _results;
    };
    p5.mateCrossover = function() {
      var i, key, midpoint;

      midpoint = p5.round(p5.random(p5.numGenes) / 2);
      i = 0;
      for (key in this.prevPrevGenData) {
        if (i > midpoint) {
          this.curGenData[key] = this.prevGenData[key];
        } else {
          this.curGenData[key] = this.prevPrevGenData[key];
        }
        i++;
      }
      p5.mutateNewGeneration();
      return p5.newGeneration();
    };
    p5.mateAttribute = function(key) {
      return this.curGenData[key] = (this.prevGenData[key] + this.prevPrevGenData[key]) * 0.5;
    };
    return p5.mutateNewGeneration = function() {
      var key, _results;

      _results = [];
      for (key in this.curGenData) {
        if (p5.random(1) < this.mutationRate) {
          _results.push(this.curGenData[key] *= p5.random(this.mutationStrength));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
  };

  BeanNode = (function() {
    function BeanNode(p5, nodeData, x, y) {
      this.p5 = p5;
      this.nodeData = nodeData;
      this.beans = [];
      this.x = x || this.p5.random(100, this.p5.width - 100);
      this.y = y || this.p5.random(100, this.p5.height - 100);
    }

    BeanNode.prototype.draw = function() {
      var bean, x_off, y_off, _i, _len, _ref;

      x_off = this.p5.frameCount * this.nodeData.x_offModifier;
      y_off = x_off + this.nodeData.y_offModifier;
      if (this.p5.frameCount % this.nodeData.drawFrequency === 0) {
        bean = new Bean(this.p5, {
          x: this.x,
          y: this.y,
          x_off: x_off,
          y_off: y_off,
          vel: this.nodeData.vel,
          accel: this.nodeData.accel
        });
        this.beans.push(bean);
      }
      _ref = this.beans;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bean = _ref[_i];
        bean.draw();
      }
      return this.beans = this.beans.filter(function(bean) {
        return bean.dead === false;
      });
    };

    return BeanNode;

  })();

  Bean = (function() {
    function Bean(p5, opts) {
      this.p5 = p5;
      this.x = opts.x;
      this.y = opts.y;
      this.dead = false;
      this.x_off = opts.x_off;
      this.y_off = opts.y_off;
      this.vel = opts.vel || 3;
      this.accel = opts.accel || -0.003;
    }

    Bean.prototype.draw = function() {
      this.x += this.p5.noise(this.x_off) * this.vel - this.vel / 2;
      this.y += this.p5.noise(this.y_off) * this.vel - this.vel / 2;
      if (this.vel !== 0 && !this.offScreen()) {
        this.x_off += this.p5.curGenData.x_offIncrementer;
        this.y_off += this.p5.curGenData.y_offIncrementer;
        this.vel += this.accel;
        this.set_color();
        return this.p5.point(this.x, this.y);
      } else {
        return this.dead = true;
      }
    };

    Bean.prototype.set_color = function() {
      var a, b, h, s;

      this.p5.colorMode(this.p5.HSB, 360, 100, 100);
      h = this.p5.map(this.x + this.y, 0, this.p5.width + this.p5.height, 0, 360);
      s = 100;
      b = 100;
      a = this.p5.curGenData.alpha;
      return this.p5.stroke(h, s, b, a);
    };

    Bean.prototype.offScreen = function() {
      return this.x > this.p5.width || this.x < 0 || this.y > this.p5.height || this.y < 0;
    };

    return Bean;

  })();

  $(document).ready(function() {
    var canvas, processing,
      _this = this;

    canvas = document.getElementById("processing");
    processing = new Processing(canvas, coffee_draw);
    $('#Like').bind('click', function(event) {
      return processing.like();
    });
    $('#Skip').bind('click', function(event) {
      return processing.skip();
    });
    return $('#processing').bind('mousedown', function(event) {
      return processing.addBeanNode(event);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=coffee_draw.map
*/
